openapi: 3.0.1
info:
  title: TIXY Private Organizer API
  version: 1.0.0
  description: >
    The TIXY Private Organizer API provides endpoints for event organizers to manage their events 
    and handle secure interactions with clients. It includes CORS preflight support, event retrieval 
    by unique ID or slug, and integrates with AWS Lambda for custom backend processing.
servers:
  - url: https://private-api.tixyapp.com

paths:

  /sales/event/{id}:
    get:
      summary: Retrieve sales report for a specific event
      description: >
        Fetches detailed sales report for a specific event identified by its unique identifier (`eventId`) 
        or SEO-friendly slug (`eventSlug`). This endpoint requires authentication and provides information 
        such as the number of tickets sold, net and gross income, fees, and other relevant sales metrics 
        for the specified event.
      parameters:
        - name: id
          in: path
          required: true
          description: >
            The unique identifier (`eventId`) or SEO-friendly slug (`eventSlug`) for the event. 
            Accepts either a MongoDB ObjectId or a valid SEO-friendly slug.
          schema:
            oneOf:
              - type: string
                pattern: '^[a-f0-9]{24}$'
                description: MongoDB ObjectId format for `eventId`.
              - type: string
                pattern: '^[a-zA-Z0-9-_\\.]+$'
                description: Valid format for an SEO-friendly `eventSlug`.
      security:
        - privateOrganizerApiAuthFunction: []
      responses:
        '200':
          description: >
            Successful response containing sales report for the specified event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventSalesReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${privateOrganizerApiEndpointFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
  /sales/events/{status}:
    get:
      summary: Retrieve sales report for events by status
      description: >
        Returns detailed sales report for events based on the specified status in the path. 
        This endpoint requires authentication and provides an overview of the event's 
        sales performance, including the number of tickets sold, net and gross income, 
        fees, and other relevant sales metrics.
      parameters:
        - name: status
          in: path
          required: true
          description: >
            The status of the events to retrieve sales report for. Valid values are:
            - `all`: Fetch sales report for all events.
            - `published`: Fetch sales report for events currently published.
            - `pastdue`: Fetch sales report for events whose dates have passed.
          schema:
            type: string
            enum:
              - all
              - published
              - pastdue
      security:
        - privateOrganizerApiAuthFunction: []
      responses:
        '200':
          description: >
            Successful response containing sales report for the specified events.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventSalesReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${privateOrganizerApiEndpointFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy 
  /sales/tour/{id}:
    get:
      summary: Retrieve sales data for a specific tour
      description: >
        Fetches detailed sales data for a specific tour identified by its unique identifier (`tourId`) 
        or SEO-friendly slug (`tourSlug`). Includes aggregated data for all events within the tour 
        as well as details for each event.
      parameters:
        - name: id
          in: path
          required: true
          description: >
            The unique identifier (`tourId`) or SEO-friendly slug (`tourSlug`) for the tour. 
            Accepts either a MongoDB ObjectId or a valid SEO-friendly slug.
          schema:
            oneOf:
              - type: string
                pattern: '^[a-f0-9]{24}$'
                description: MongoDB ObjectId format for `tourId`.
              - type: string
                pattern: '^[a-zA-Z0-9-_\\.]+$'
                description: Valid format for an SEO-friendly `tourSlug`.
      security:
        - privateOrganizerApiAuthFunction: []
      responses:
        '200':
          description: >
            Successful response containing sales data for the specified tour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourSalesReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${privateOrganizerApiEndpointFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
  /sales/tours/{status}:
    get:
      summary: Retrieve sales report for tours by status
      description: >
        Fetches detailed sales report for all tours with the specified status.
      parameters:
        - name: status
          in: path
          required: true
          description: >
            The status of the tours to retrieve sales report for. Valid values are:
            - `published`: Fetch sales report for tours currently published.
            - `pastdue`: Fetch sales report for tours whose dates have passed.
          schema:
            type: string
            enum:
              - published
              - pastdue
      security:
        - privateOrganizerApiAuthFunction: []
      responses:
        '200':
          description: >
            Successful response containing sales report for the specified tours.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TourSalesReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /sales/terms:
    get:
      summary: Get sales terms and fees
      description: >
        Fetches all information related to sales terms and fees with Tixy. Includes:
        - Default fees paid by the organizer.
        - Default service charges paid by users purchasing tickets on the Tixy platform.
        - Specific services and fees applied to each event.
      security:
        - privateOrganizerApiAuthFunction: []
      responses:
        '200':
          description: >
            Successful response containing the sales terms and fee details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SalesTerms'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
      x-amazon-apigateway-integration:
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${privateOrganizerApiEndpointFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
  /statistics/events/{status}:
    get:
      summary: Retrieve statistics for events by status
      description: >
        Provides ticket statistics for events filtered by status (e.g., published, pastdue).
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - published
              - pastdue
          description: >
            The status of the events to retrieve statistics for. Valid values are `published` or `pastdue`.
      responses:
        '200':
          description: >
            Successful response containing statistics for events matching the specified status.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticsReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /statistics/event/{id}:
      get:
        summary: Retrieve statistics for a specific event
        description: >
          Provides ticket statistics for a specific event, including breakdowns for tickets sold, reserved, available, and more.
        parameters:
          - name: id
            in: path
            required: true
            schema:
              type: string
              description: >
                The unique identifier or slug for the event to retrieve statistics for.
        responses:
          '200':
            description: >
              Successful response containing statistics for the specified event.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/StatisticsReport'
          '400':
            $ref: '#/components/responses/BadRequest'
          '401':
            $ref: '#/components/responses/Unauthorized'
          '404':
            $ref: '#/components/responses/NotFound'
          '500':
            $ref: '#/components/responses/InternalServerError'
  /statistics/tours/{status}:
    get:
      summary: Retrieve statistics for tours by status
      description: >
        Provides ticket statistics for tours filtered by status (e.g., published, pastdue).
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - published
              - pastdue
          description: >
            The status of the tours to retrieve statistics for. Valid values are `published` or `pastdue`.
      responses:
        '200':
          description: >
            Successful response containing statistics for tours matching the specified status.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatisticsReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /statistics/tour/{id}:
    get:
      summary: Retrieve statistics for a specific tour
      description: >
        Provides ticket statistics for a specific tour, aggregating data across all its events.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: >
              The unique identifier or slug for the tour to retrieve statistics for.
      responses:
        '200':
          description: >
            Successful response containing statistics for the specified tour.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsReport'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /statistics/tickets-timeline/{id}:
    get:
      summary: Retrieve ticket statistics over a timeline
      description: >
        Provides ticket statistics for a specific event or tour over time, including tickets sold, returned, and invitations distributed.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            description: >
              The unique identifier or slug for the event or tour to retrieve ticket timeline statistics for.
      responses:
        '200':
          description: >
            Successful response containing ticket statistics over a timeline for the specified event or tour.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketTimelineEntry'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /marketing/devices/{id}:
    get:
      summary: Retrieve device statistics for a specific event or tour
      description: >
        Provides detailed statistics about the devices used to interact with a specific event or tour. 
        Includes breakdown by device type (Mobile, Desktop, Tablet) along with usage percentages.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: >
            The unique identifier or slug of the event or tour for which device statistics are retrieved.
      responses:
        '200':
          description: >
            Successful response containing device statistics for the specified event or tour.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mobile:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of interactions from mobile devices.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of interactions from mobile devices.
                  desktop:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of interactions from desktop devices.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of interactions from desktop devices.
                  tablet:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of interactions from tablet devices.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of interactions from tablet devices.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /marketing/geography/{id}:
    get:
      summary: Retrieve geographic statistics for a specific event or tour
      description: >
        Provides detailed geographic statistics for a specific event or tour. 
        Includes breakdowns by country and city along with interaction counts and percentages.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: >
            The unique identifier or slug of the event or tour for which geographic statistics are retrieved.
      responses:
        '200':
          description: >
            Successful response containing geographic statistics for the specified event or tour.
          content:
            application/json:
              schema:
                type: object
                properties:
                  countries:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Name of the country.
                        count:
                          type: integer
                          description: Number of interactions from the country.
                        percentage:
                          type: number
                          format: float
                          description: Percentage of interactions from the country.
                  cities:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: Name of the city.
                        count:
                          type: integer
                          description: Number of interactions from the city.
                        percentage:
                          type: number
                          format: float
                          description: Percentage of interactions from the city.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /marketing/conversion/{id}:
    get:
      summary: Retrieve conversion statistics for a specific event or tour
      description: >
        Provides detailed conversion statistics for a specific event or tour. 
        Includes both Fans Conversion and Tickets Conversion metrics.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: >
            The unique identifier or slug of the event or tour for which conversion statistics are retrieved.
      responses:
        '200':
          description: >
            Successful response containing conversion statistics for the specified event or tour.
          content:
            application/json:
              schema:
                type: object
                properties:
                  fans_conversion:
                    type: object
                    properties:
                      displayed_event:
                        type: integer
                        description: Number of times the event was displayed.
                      clicked_buy_tix:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: Number of times the "Buy TIX" button was clicked.
                          percentage:
                            type: number
                            format: float
                            description: Percentage of total "Buy TIX" clicks.
                      reserved_tix:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: Number of reserved tickets.
                          percentage:
                            type: number
                            format: float
                            description: Percentage of total reservations.
                      purchased_tix:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: Number of purchased tickets.
                          percentage:
                            type: number
                            format: float
                            description: Percentage of total purchases.
                  tickets_conversion:
                    type: object
                    properties:
                      reserved_tixes:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: Number of reserved tickets.
                          percentage:
                            type: number
                            format: float
                            description: Percentage of total reservations.
                      purchased_tixes:
                        type: object
                        properties:
                          count:
                            type: integer
                            description: Number of purchased tickets.
                          percentage:
                            type: number
                            format: float
                            description: Percentage of total purchases.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /marketing/clients-granted-consent/events/{status}:
    get:
      summary: Retrieve clients who granted consent for marketing for events by status
      description: >
        Retrieves a list of clients who have granted consent for marketing purposes for events filtered by the specified status.
        Includes metrics such as total users, users who granted consent, users who revoked consent, and percentages.
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - all
              - published
              - pastdue
          description: >
            The status of the events to retrieve client marketing consent information for. Valid values are:
            - `all`: Retrieve consents for all events.
            - `published`: Retrieve consents for currently published events.
            - `pastdue`: Retrieve consents for events whose dates have passed.
      responses:
        '200':
          description: >
            Successful response containing marketing consent information for clients associated with events matching the specified status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                    description: Total number of users for the events.
                  consent_granted:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who granted marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who granted marketing consent.
                  consent_revoked:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who revoked marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who revoked marketing consent.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /marketing/clients-granted-consent/tours/{status}:
    get:
      summary: Retrieve clients who granted consent for marketing for tours by status
      description: >
        Retrieves a list of clients who have granted consent for marketing purposes for tours filtered by the specified status.
        Includes metrics such as total users, users who granted consent, users who revoked consent, and percentages.
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - all
              - published
              - pastdue
          description: >
            The status of the tours to retrieve client marketing consent information for. Valid values are:
            - `all`: Retrieve consents for all tours.
            - `published`: Retrieve consents for currently published tours.
            - `pastdue`: Retrieve consents for tours whose dates have passed.
      responses:
        '200':
          description: >
            Successful response containing marketing consent information for clients associated with tours matching the specified status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                    description: Total number of users for the tours.
                  consent_granted:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who granted marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who granted marketing consent.
                  consent_revoked:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who revoked marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who revoked marketing consent.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /marketing/clients-granted-consent/event/{id}:
    get:
      summary: Retrieve clients who granted consent for marketing for a specific event
      description: >
        Retrieves a list of clients who have granted consent for marketing purposes for a specific event.
        Includes metrics such as total users, users who granted consent, users who revoked consent, and percentages.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: >
            The unique identifier or slug of the event to retrieve client marketing consent information for.
      responses:
        '200':
          description: >
            Successful response containing marketing consent information for clients associated with the specified event.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                    description: Total number of users for the event.
                  consent_granted:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who granted marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who granted marketing consent.
                  consent_revoked:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who revoked marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who revoked marketing consent.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /marketing/clients-granted-consent/tour/{id}:
    get:
      summary: Retrieve clients who granted consent for marketing for a specific tour
      description: >
        Retrieves a list of clients who have granted consent for marketing purposes for a specific tour.
        Includes metrics such as total users, users who granted consent, users who revoked consent, and percentages.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: >
            The unique identifier or slug of the tour to retrieve client marketing consent information for.
      responses:
        '200':
          description: >
            Successful response containing marketing consent information for clients associated with the specified tour.
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_users:
                    type: integer
                    description: Total number of users for the tour.
                  consent_granted:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who granted marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who granted marketing consent.
                  consent_revoked:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Number of users who revoked marketing consent.
                      percentage:
                        type: number
                        format: float
                        description: Percentage of users who revoked marketing consent.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
components:
  schemas:
    TourSalesReport:
      type: object
      properties:
        tour_id:
          type: string
          description: Unique identifier for the tour.
        tour_name:
          type: string
          description: Name of the tour.
        tours_count:
          type: integer
          description: Total number of events in the tour.
        total_tickets_sold:
          type: integer
          description: Total number of tickets sold across all events in the tour.
        total_gross_income:
          type: number
          format: float
          description: Total gross income across all events in the tour.
        total_net_income:
          type: number
          format: float
          description: Total net income across all events in the tour after deductions.
        total_fees:
          type: object
          properties:
            service_fee:
              type: number
              format: float
              description: Total service fee applied across all events in the tour.
            tax:
              type: number
              format: float
              description: Total tax applied across all events in the tour.
        status:
          type: string
          description: Current status of the tour (e.g., `published`, `pastdue`).
        events:
          type: array
          description: Details of the events included in the tour.
          items:
            $ref: '#/components/schemas/EventSalesReport'
      required:
        - tour_id
        - tour_name
        - events_count
        - total_tickets_sold
        - total_gross_income
        - total_net_income
        - total_fees
    EventSalesReport:
      type: object
      properties:
        event_id:
          type: string
          description: Unique identifier for the event.
        event_name:
          type: string
          description: Name of the event.
        tickets_sold:
          type: integer
          description: Total number of tickets sold.
        gross_income:
          type: number
          format: float
          description: Total revenue from ticket sales before deductions.
        net_income:
          type: number
          format: float
          description: Revenue from ticket sales after fees and deductions.
        fees:
          type: object
          properties:
            service_fee:
              type: number
              format: float
              description: Service fee applied to ticket sales.
            tax:
              type: number
              format: float
              description: Tax applied to ticket sales.
        event_status:
          type: string
          description: Current status of the event (e.g., `published`, `pastdue`, or `all`).
      required:
        - event_id
        - event_name
        - tickets_sold
        - gross_income
        - net_income
        - fees
    SalesTerms:
      type: object
      properties:
        default_fee:
          type: object
          description: Default fee structure paid by the organizer.
          properties:
            percentage:
              type: number
              format: float
              description: Percentage of ticket price taken as the fee.
            fixed:
              type: number
              format: float
              description: Fixed fee amount per ticket.
        default_service_charge:
          type: object
          description: Default service charge structure paid by ticket buyers.
          properties:
            percentage:
              type: number
              format: float
              description: Percentage of ticket price taken as the service charge.
            fixed:
              type: number
              format: float
              description: Fixed service charge amount per ticket.
        event_specific_terms:
          type: array
          description: Specific terms and fees applied to each event.
          items:
            type: object
            properties:
              event_id:
                type: string
                description: Unique identifier for the event.
              event_name:
                type: string
                description: Name of the event.
              organizer_fee:
                type: object
                description: Fee structure paid by the organizer for this event.
                properties:
                  percentage:
                    type: number
                    format: float
                    description: Percentage of ticket price taken as the fee.
                  fixed:
                    type: number
                    format: float
                    description: Fixed fee amount per ticket.
              service_charge:
                type: object
                description: Service charge structure paid by ticket buyers for this event.
                properties:
                  percentage:
                    type: number
                    format: float
                    description: Percentage of ticket price taken as the service charge.
                  fixed:
                    type: number
                    format: float
                    description: Fixed service charge amount per ticket.
      required:
        - default_fee
        - default_service_charge
        - event_specific_terms
    TicketStatistics:
      type: object
      properties:
        available:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets available.
            percentage:
              type: number
              format: float
              description: Percentage of total tickets available.
        sold:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets sold.
            percentage:
              type: number
              format: float
              description: Percentage of total tickets sold.
        reserved:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets in reservation.
            percentage:
              type: number
              format: float
              description: Percentage of total tickets in reservation.
        unsold:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets unsold.
            percentage:
              type: number
              format: float
              description: Percentage of total tickets unsold.
        returned:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets returned.
            percentage:
              type: number
              format: float
              description: Percentage of total tickets returned.
        invitations:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets distributed as invitations.
            percentage:
              type: number
              format: float
              description: Percentage of total tickets distributed as invitations.
    TicketTimelineEntry:
      type: object
      properties:
        date:
          type: string
          format: date
          description: Date of the data point.
        tickets_sold:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets sold on this date.
            percentage:
              type: number
              format: float
              description: Percentage of all tickets sold on this date.
        tickets_returned:
          type: object
          properties:
            count:
              type: integer
              description: Number of tickets returned on this date.
            percentage:
              type: number
              format: float
              description: Percentage of all tickets returned on this date.
        invitations:
          type: object
          properties:
            count:
              type: integer
              description: Number of invitations distributed on this date.
            percentage:
              type: number
              format: float
              description: Percentage of all tickets distributed as invitations on this date.
    StatisticsReport:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the event or tour.
        name:
          type: string
          description: Name of the event or tour.
        ticket_statistics:
          $ref: '#/components/schemas/TicketStatistics'
    Event:
      type: object
      description: Represents an event in the system.
      properties:
        id:
          type: string
          description: Unique identifier for the event.
        name:
          type: string
          description: Name of the event.
        slug:
          type: string
          description: >
            A short, URL-friendly identifier for the event, used for creating clean URLs.
        date:
          type: string
          format: date-time
          description: The scheduled date and time for the event.
        location:
          type: string
          description: The venue or location where the event will be held.
    Error:
      type: object
      description: Represents an error response.
      properties:
        code:
          type: string
          description: The error code.
        message:
          type: string
          description: A human-readable error message.
  securitySchemes:
    privateOrganizerApiAuthFunction:
      type: apiKey
      name: Authorization
      in: header
      description: >
        Custom API key authorization header for accessing private organizer endpoints.
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        authorizerUri: 
          uri: 
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${privateOrganizerApiAuthFunction.Arn}/invocations
        authorizerResultTtlInSeconds: 300
        identitySource: method.request.header.Authorization
  responses:
    BadRequest:
      description: >
        Bad Request. The `id` parameter is invalid or malformed.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message explaining the issue.
              code:
                type: string
                description: Error code indicating the error.
    Unauthorized:
      description: >
        Unauthorized. The request is not authenticated, or the provided credentials are invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message explaining the unauthorized request.
              code:
                type: string
                description: Error code indicating the reason for the unauthorized status.
    NotFound:
      description: >
        Not Found. No resource was found for the specified `id`.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message explaining that the resource was not found.
              code:
                type: string
                description: Error code indicating the resource was not found.
    InternalServerError:
      description: >
        Internal Server Error. An unexpected error occurred while processing the request.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Error message explaining the server issue.
              code:
                type: string
                description: Error code indicating the server error.