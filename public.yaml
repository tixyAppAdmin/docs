openapi: 3.0.1
info:
  title: TIXY Public Organizer API
  version: 1.0.0
  description: >
    The TIXY Public Organizer API allows public users to access event and tour data. 
    It includes endpoints to fetch event and tour details based on status or specific identifiers.
servers:
  - url: https://public-api.tixyapp.com

paths:
  /events:
    get:
      summary: Retrieve public events by status
      description: >
        Fetches a list of public events filtered by the specified status. 
        Allows users to view events that are currently published, past due, or all available events.
      parameters:
        - name: status
          in: query
          required: false
          description: >
            The status of the events to retrieve sales report for. If not specified, it defaults to `all`. 
            Valid values are:
              - `all`: Fetch sales report for all events.
              - `published`: Fetch sales report for events currently published.
              - `pastdue`: Fetch sales report for events whose dates have passed.

          schema:
            type: string
            enum:
              - all
              - published
              - pastdue
      security:
        - organizerApiAuthFunction: []
      responses:
        "200":
          description: >
            Successful response containing a list of events filtered by the specified status.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${organizerApiPublicEndpointsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        cacheKeyParameters: []
        cacheNamespace: "none"
        authorizationType: "NONE"
  /event:
    get:
      summary: Retrieve details for a specific public event
      description: >
        Fetches the details for a specific public event identified by its unique identifier or slug.
      parameters:
        - name: eventId
          in: query
          required: false
          description: >
            The unique identifier for the event. Must be a 24-character hexadecimal string. **Note:** If you provide this parameter, do not provide `eventSlug`.
          schema:
            type: string
            pattern: "^[a-f0-9]{24}$"
        - name: eventSlug
          in: query
          required: false
          description: >
            The SEO-friendly slug for the event. Accepts alphanumeric characters, hyphens, underscores, and periods. **Note:** If you provide this parameter, do not provide `eventId`.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_\\.]+$'
      security:
        - organizerApiAuthFunction: []
      responses:
        "200":
          description: >
            Successful response containing the details of the specified event.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${organizerApiPublicEndpointsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        cacheKeyParameters: []
        cacheNamespace: "none"
        authorizationType: "NONE"
  /tour:
    get:
      summary: Retrieve details for a specific public tour
      description: >
        Fetches the details for a specific public tour identified by its unique identifier or slug.
      parameters:
        - name: tourId
          in: query
          required: false
          description: >
            The unique identifier for the tour. Must be a 24-character hexadecimal string.
          schema:
            type: string
            pattern: "^[a-f0-9]{24}$"
        - name: tourSlug
          in: query
          required: false
          description: >
            The SEO-friendly slug for the tour. Accepts alphanumeric characters, hyphens, underscores, and periods.
          schema:
            type: string
            pattern: '^[a-zA-Z0-9-_\\.]+$'
      security:
        - organizerApiAuthFunction: []
      responses:
        "200":
          description: >
            Successful response containing the details of the specified tour.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PublicTour"
        "400":
          $ref: "#/components/responses/BadRequest"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
      x-amazon-apigateway-integration:
        uri:
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${organizerApiPublicEndpointsFunction.Arn}/invocations
        httpMethod: POST
        type: aws_proxy
        cacheKeyParameters: []
        cacheNamespace: "none"
        authorizationType: "NONE"
components:
  schemas:
    Event:
      type: object
      properties:
        social:
          type: object
          properties:
            links:
              type: array
              items:
                type: string
          description: "Social media links for the event."
        tickets:
          type: object
          properties:
            isTicketResselingEnabled:
              type: boolean

              description: "Indicates if ticket reselling is enabled."
            tickets:
              type: array
              items:
                $ref: "#/components/schemas/Ticket"
          description: "Details of tickets associated with the event."
        dates:
          type: object
          properties:
            scanning:
              type: object
              properties:
                start:
                  type: string
                  format: date-time
                end:
                  type: string
                  format: date-time
              description: "Dates for ticket scanning."
            end:
              type: string
              format: date-time
            openings:
              type: array
              items:
                type: object
                properties:
                  date:
                    type: string
                    format: date-time
                  id:
                    type: string
                    format: uuid
          description: "Event date details."
        status:
          type: string
          description: "Status of the event."
        types:
          type: array
          items:
            type: string
          description: "Event types or categories."
        visibility:
          type: string
          description: "Visibility of the event."
        allowResale:
          type: boolean
          description: "Indicates if ticket resale is allowed."
        name:
          type: string
          description: "Name of the event."
        artistsDetails:
          type: string
          nullable: true
          description: "Details of artists performing at the event."
        publishTime:
          type: string
          format: date-time
        id:
          type: string
          format: uuid
        slug:
          type: string
          description: "URL-friendly identifier for the event."
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        category:
          type: string
          description: "Category of the event."
        restrictions:
          type: object
          properties:
            ageLimit:
              type: string

        description:
          type: string
          description: "Detailed information about an event."
    Ticket:
      type: object
      properties:
        name:
          type: string

        description:
          type: string

        id:
          type: string
          format: uuid

        ticketPools:
          type: array
          items:
            $ref: "#/components/schemas/TicketPool"
        isSinglePoolTicket:
          type: boolean

        shouldDisplayTicketName:
          type: boolean

    TicketPool:
      type: object
      properties:
        salesDates:
          type: object
          properties:
            start:
              type: string

            hasEndDate:
              type: boolean

            end:
              type: string

            hasStartDate:
              type: boolean

        id:
          type: string
          format: uuid
        salesActive:
          type: boolean
        price:
          type: string
    PublicTour:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the tour.
        name:
          type: string
          description: Name of the tour.
        events:
          type: array
          description: List of events included in the tour.
          items:
            $ref: "#/components/schemas/Event"
        description:
          type: string
          description: A short description of the tour.
        status:
          type: string
          description: Current status of the tour (e.g., published, pastdue).
  securitySchemes:
    organizerApiAuthFunction:
      type: http
      scheme: bearer
      description: >
        Custom Bearer token authentication for accessing public organizer endpoints.
      x-amazon-apigateway-authtype: custom
      x-amazon-apigateway-authorizer:
        authorizerUri:
          uri:
            Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${organizerApiAuthFunction.Arn}/invocations
        authorizerResultTtlInSeconds: 300
        identitySource: method.request.header.Authorization
  responses:
    BadRequest:
      description: >
        Bad Request. The provided parameters are invalid or malformed.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Explanation of the error.
              code:
                type: string
                description: Error code.
    NotFound:
      description: >
        Not Found. The requested resource was not found.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Explanation of the error.
              code:
                type: string
                description: Error code.
    InternalServerError:
      description: >
        Internal Server Error. An unexpected error occurred.
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: Explanation of the server error.
              code:
                type: string
                description: Error code.
